// <auto-generated />
using System;
using GymManagementDAL.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManagementDAL.Data.Migrations
{
    [DbContext(typeof(GymDbContexts))]
    [Migration("20251021234842_Edition Creation")]
    partial class EditionCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymManagementDAL.Entities.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.HealthRecords", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("GymManagementDAL.Entities.MemberSessions", b =>
                {
                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.Property<int>("SessionsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("BookingDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsAttended")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MembersId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("MemberSessions");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Members", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("JoinDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Members", t =>
                        {
                            t.HasCheckConstraint("EmailValidFormatConstraint", "Email like '_%@_%._%'");

                            t.HasCheckConstraint("PhoneFormatConstraint", "Phone like '01[0125]%' AND Phone not like '%[^0-9]%'");
                        });
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Memberships", b =>
                {
                    b.Property<int>("PlansId")
                        .HasColumnType("int");

                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlansId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Plans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Plans", t =>
                        {
                            t.HasCheckConstraint("DurationDaysConstraint", "DurationDays between 1 and 365");
                        });
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Sessions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainersId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("TrainersId");

                    b.ToTable("Sessions", t =>
                        {
                            t.HasCheckConstraint("CapacityCheckConstraint", "Capacity between 1 and 25");

                            t.HasCheckConstraint("StartDateConstraint", "EndDate > StartDate");
                        });
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Trainers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("HireDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<int>("Specialist")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Trainers", t =>
                        {
                            t.HasCheckConstraint("EmailValidFormatConstraint", "Email like '_%@_%._%'")
                                .HasName("EmailValidFormatConstraint1");

                            t.HasCheckConstraint("PhoneFormatConstraint", "Phone like '01[0125]%' AND Phone not like '%[^0-9]%'")
                                .HasName("PhoneFormatConstraint1");
                        });
                });

            modelBuilder.Entity("GymManagementDAL.Entities.HealthRecords", b =>
                {
                    b.HasOne("GymManagementDAL.Entities.Members", null)
                        .WithOne("HealthRecords")
                        .HasForeignKey("GymManagementDAL.Entities.HealthRecords", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagementDAL.Entities.MemberSessions", b =>
                {
                    b.HasOne("GymManagementDAL.Entities.Members", "Members")
                        .WithMany("MemberSessions")
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagementDAL.Entities.Sessions", "Sessions")
                        .WithMany("MemberSessions")
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Members");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Members", b =>
                {
                    b.OwnsOne("GymManagementDAL.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("MembersId")
                                .HasColumnType("int");

                            b1.Property<int>("BuildingNumber")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.HasKey("MembersId");

                            b1.ToTable("Members");

                            b1.WithOwner()
                                .HasForeignKey("MembersId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Memberships", b =>
                {
                    b.HasOne("GymManagementDAL.Entities.Members", "Members")
                        .WithMany("Memberships")
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagementDAL.Entities.Plans", "Plans")
                        .WithMany("Memberships")
                        .HasForeignKey("PlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Members");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Sessions", b =>
                {
                    b.HasOne("GymManagementDAL.Entities.Categories", "Categories")
                        .WithMany("Sessions")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagementDAL.Entities.Trainers", "Trainers")
                        .WithMany("Sessions")
                        .HasForeignKey("TrainersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Trainers", b =>
                {
                    b.OwnsOne("GymManagementDAL.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("TrainersId")
                                .HasColumnType("int");

                            b1.Property<int>("BuildingNumber")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(30)");

                            b1.HasKey("TrainersId");

                            b1.ToTable("Trainers");

                            b1.WithOwner()
                                .HasForeignKey("TrainersId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Categories", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Members", b =>
                {
                    b.Navigation("HealthRecords")
                        .IsRequired();

                    b.Navigation("MemberSessions");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Plans", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Sessions", b =>
                {
                    b.Navigation("MemberSessions");
                });

            modelBuilder.Entity("GymManagementDAL.Entities.Trainers", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
